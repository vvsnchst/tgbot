from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_session
from models import User, Resume, Vacancy, Application, SearchHistory
from sqlalchemy import select, delete, and_, or_, func
import os
from config import config
from keyboards import (
    get_main_menu,
    get_employer_menu,
    get_job_seeker_menu,
    get_skip_file_keyboard,
    get_confirm_skip_file_keyboard,
    get_vacancies_list_keyboard,
    get_back_to_vacancies_list_keyboard,
    get_confirm_delete_vacancy_keyboard,
    get_resumes_list_keyboard,
    get_back_to_resumes_list_keyboard,
    get_confirm_delete_resume_keyboard,
    get_vacancy_navigation_keyboard,
    get_resume_selection_keyboard,
    get_application_response_keyboard
)

router = Router()

class VacancyStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_company = State()
    waiting_for_salary = State()
    waiting_for_file = State()

class ResumeStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_experience = State()
    waiting_for_file = State()

class SearchVacancy(StatesGroup):
    waiting_for_position = State()

@router.message(Command("menu"))
async def show_menu(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

@router.message(Command("start"))
async def cmd_start(message: Message):
    async for session in get_session():
        user = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id)
        )
        user = user.scalar_one_or_none()
        
        if not user:
            new_user = User(
                telegram_id=message.from_user.id,
                username=message.from_user.username
            )
            session.add(new_user)
            await session.commit()
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã! üéâ\n\n"
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
                reply_markup=get_main_menu()
            )
        else:
            await message.answer(
                "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üëã\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_menu()
            )

@router.callback_query(F.data == "job_seeker")
async def process_job_seeker(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ú–µ–Ω—é —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è:",
        reply_markup=get_job_seeker_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "employer")
async def process_employer(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ú–µ–Ω—é —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:",
        reply_markup=get_employer_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "post_vacancy")
async def start_vacancy_creation(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏:")
    await state.set_state(VacancyStates.waiting_for_title)
    await callback.answer()

@router.message(VacancyStates.waiting_for_title)
async def process_vacancy_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")
    await state.set_state(VacancyStates.waiting_for_description)

@router.message(VacancyStates.waiting_for_description)
async def process_vacancy_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    await state.set_state(VacancyStates.waiting_for_company)

@router.message(VacancyStates.waiting_for_company)
async def process_vacancy_company(message: Message, state: FSMContext):
    await state.update_data(company=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É (–∏–ª–∏ '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏'):")
    await state.set_state(VacancyStates.waiting_for_salary)

@router.message(VacancyStates.waiting_for_salary)
async def process_vacancy_salary(message: Message, state: FSMContext):
    await state.update_data(salary=message.text)
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ –≤–∞–∫–∞–Ω—Å–∏–∏?",
        reply_markup=get_skip_file_keyboard()
    )
    await state.set_state(VacancyStates.waiting_for_file)

@router.callback_query(F.data == "skip_file")
async def confirm_skip_file(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –±–µ–∑ —Ñ–∞–π–ª–∞?",
        reply_markup=get_confirm_skip_file_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_skip_file")
async def create_vacancy_without_file(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    async for session in get_session():
        vacancy = Vacancy(
            user_id=callback.from_user.id,  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user_id —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
            title=data["title"],
            company=data["company"],
            salary=data["salary"],
            description=data["description"]
        )
        session.add(vacancy)
        await session.commit()
        
        print(f"Created vacancy: {vacancy.id} for user: {callback.from_user.id}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        
        await callback.message.edit_text(
            "‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
            reply_markup=get_employer_menu()
        )
    
    await state.clear()
    await callback.answer()

@router.message(VacancyStates.waiting_for_file)
async def process_vacancy_file(message: Message, state: FSMContext):
    if not message.document and not message.photo:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ.",
            reply_markup=get_skip_file_keyboard()
        )
        return
    
    file_id = message.document.file_id if message.document else message.photo[-1].file_id
    file_path = None
    
    if message.document:
        file_path = f"vacancy_files/{message.document.file_name}"
    elif message.photo:
        file_path = f"vacancy_files/photo_{message.message_id}.jpg"
    
    data = await state.get_data()
    
    async for session in get_session():
        vacancy = Vacancy(
            user_id=message.from_user.id,  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user_id —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
            title=data["title"],
            company=data["company"],
            salary=data["salary"],
            description=data["description"],
            file_id=file_id,
            file_path=file_path
        )
        session.add(vacancy)
        await session.commit()
        
        print(f"Created vacancy with file: {vacancy.id} for user: {message.from_user.id}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        
        await message.answer(
            "‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
            reply_markup=get_employer_menu()
        )
    
    await state.clear()

@router.callback_query(F.data == "main_menu")
async def return_to_main_menu(callback: CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
    await callback.answer()

@router.callback_query(F.data == "my_vacancies")
async def show_my_vacancies(callback: CallbackQuery):
    print(f"Showing vacancies for user: {callback.from_user.id}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(Vacancy).where(Vacancy.user_id == callback.from_user.id)
        )
        vacancies = result.scalars().all()
        
        print(f"Found {len(vacancies)} vacancies for user {callback.from_user.id}")
        for v in vacancies:
            print(f"Vacancy: {v.id} - {v.title} - User: {v.user_id}")
        
        if not vacancies:
            await callback.message.delete()
            await callback.message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π.",
                reply_markup=get_employer_menu()
            )
            return
            
        await callback.message.delete()
        await callback.message.answer(
            "–í–∞—à–∏ –≤–∞–∫–∞–Ω—Å–∏–∏:",
            reply_markup=get_vacancies_list_keyboard(vacancies)
        )
    await callback.answer()

@router.callback_query(F.data.startswith("view_vacancy_"))
async def view_vacancy(callback: CallbackQuery, bot: Bot):
    vacancy_id = int(callback.data.split("_")[-1])
    
    async for session in get_session():
        result = await session.execute(
            select(Vacancy).where(Vacancy.id == vacancy_id)
        )
        vacancy = result.scalar_one_or_none()
        
        if not vacancy:
            await callback.message.edit_text(
                "–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_employer_menu()
            )
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {vacancy.title}\n"
            f"–ö–æ–º–ø–∞–Ω–∏—è: {vacancy.company}\n"
            f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy.salary}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {vacancy.description}\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {vacancy.created_at.strftime('%d.%m.%Y %H:%M')}"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_to_vacancies_list_keyboard(vacancy.id)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if vacancy.file_id:
            try:
                if vacancy.file_path and vacancy.file_path.lower().endswith(('.jpg', '.jpeg', '.png')):
                    await bot.send_photo(
                        chat_id=callback.message.chat.id,
                        photo=vacancy.file_id,
                        caption=f"–§–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy.title}"
                    )
                else:
                    await bot.send_document(
                        chat_id=callback.message.chat.id,
                        document=vacancy.file_id,
                        caption=f"–§–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy.title}"
                    )
            except Exception as e:
                print(f"Error sending file: {e}")
                await callback.message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."
                )

    await callback.answer()

@router.callback_query(F.data.startswith("delete_vacancy_"))
async def confirm_delete_vacancy(callback: CallbackQuery):
    vacancy_id = int(callback.data.split("_")[-1])
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é?",
        reply_markup=get_confirm_delete_vacancy_keyboard(vacancy_id)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_vacancy_"))
async def delete_vacancy(callback: CallbackQuery, bot: Bot):
    vacancy_id = int(callback.data.split("_")[-1])
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        vacancy = await session.execute(
            select(Vacancy).where(Vacancy.id == vacancy_id)
        )
        vacancy = vacancy.scalar_one_or_none()
        
        if vacancy:
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if vacancy.file_path:
                try:
                    if os.path.exists(vacancy.file_path):
                        os.remove(vacancy.file_path)
                        print(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω: {vacancy.file_path}")
                    else:
                        print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {vacancy.file_path}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {vacancy.file_path}: {e}")
            
            # –£–¥–∞–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await session.execute(
                delete(Vacancy).where(Vacancy.id == vacancy_id)
            )
            await session.commit()
            print(f"–í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î: ID {vacancy_id}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
            await callback.message.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
            await bot.send_message(
                chat_id=callback.message.chat.id,
                text="‚úÖ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
                reply_markup=get_employer_menu()
            )
        else:
            await callback.message.edit_text(
                "–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                reply_markup=get_employer_menu()
            )
    
    await callback.answer()

@router.callback_query(F.data == "create_resume")
async def start_resume_creation(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Python Developer'):"
    )
    await state.set_state(ResumeStates.waiting_for_title)
    await callback.answer()

@router.message(ResumeStates.waiting_for_title)
async def process_resume_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ–∑—é–º–µ (–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –Ω–∞–≤—ã–∫–∏ –∏ —Ç.–¥.):")
    await state.set_state(ResumeStates.waiting_for_description)

@router.message(ResumeStates.waiting_for_description)
async def process_resume_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:")
    await state.set_state(ResumeStates.waiting_for_experience)

@router.message(ResumeStates.waiting_for_experience)
async def process_resume_experience(message: Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –≤–∞—à–∏–º —Ä–µ–∑—é–º–µ (PDF, DOC, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–∞–π–ª–∞':",
        reply_markup=get_skip_file_keyboard()
    )
    await state.set_state(ResumeStates.waiting_for_file)

@router.callback_query(F.data == "skip_file", ResumeStates.waiting_for_file)
async def skip_resume_file(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ –±–µ–∑ —Ñ–∞–π–ª–∞?",
        reply_markup=get_confirm_skip_file_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "confirm_skip_file", ResumeStates.waiting_for_file)
async def confirm_skip_resume_file(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    async for session in get_session():
        resume = Resume(
            title=data['title'],
            description=data['description'],
            experience=data['experience'],
            user_id=callback.from_user.id
        )
        session.add(resume)
        await session.commit()
    
    await callback.message.edit_text(
        "‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!",
        reply_markup=get_job_seeker_menu()
    )
    await state.clear()
    await callback.answer()

@router.message(ResumeStates.waiting_for_file)
async def process_resume_file(message: Message, state: FSMContext, bot: Bot):
    if not message.document and not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–∞–π–ª–∞'")
        return

    data = await state.get_data()
    file_id = None
    file_path = None

    try:
        if message.document:
            file_id = message.document.file_id
            file_name = message.document.file_name
            file_path = os.path.join(config.RESUMES_DIR, f"{file_id}_{file_name}")
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await bot.get_file(file_id)
            await bot.download_file(file.file_path, file_path)
        elif message.photo:
            file_id = message.photo[-1].file_id
            file_path = os.path.join(config.RESUMES_DIR, f"{file_id}.jpg")
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            file = await bot.get_file(file_id)
            await bot.download_file(file.file_path, file_path)

        async for session in get_session():
            resume = Resume(
                title=data['title'],
                description=data['description'],
                experience=data['experience'],
                user_id=message.from_user.id,
                file_id=file_id,
                file_path=file_path
            )
            session.add(resume)
            await session.commit()

        await message.answer(
            "‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!",
            reply_markup=get_job_seeker_menu()
        )
    except Exception as e:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑—é–º–µ –±–µ–∑ —Ñ–∞–π–ª–∞.",
            reply_markup=get_skip_file_keyboard()
        )
        print(f"Error saving file: {e}")
        return

    await state.clear()

@router.callback_query(F.data == "my_resumes")
async def show_my_resumes(callback: CallbackQuery):
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(Resume).where(Resume.user_id == callback.from_user.id)
        )
        resumes = result.scalars().all()

        if not resumes:
            await callback.message.delete()
            await callback.message.answer(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ.",
                reply_markup=get_job_seeker_menu()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ
        await callback.message.delete()
        await callback.message.answer(
            "–í–∞—à–∏ —Ä–µ–∑—é–º–µ:",
            reply_markup=get_resumes_list_keyboard(resumes)
        )
    await callback.answer()

@router.callback_query(F.data.startswith("view_resume_"))
async def view_resume(callback: CallbackQuery, bot: Bot):
    resume_id = int(callback.data.split("_")[-1])
    
    async for session in get_session():
        result = await session.execute(
            select(Resume).where(Resume.id == resume_id)
        )
        resume = result.scalar_one_or_none()
        
        if not resume:
            await callback.message.edit_text(
                "–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_job_seeker_menu()
            )
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            f"ID: {resume.id}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {resume.title}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {resume.description}\n"
            f"–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {resume.experience}\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {resume.created_at.strftime('%d.%m.%Y %H:%M')}"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_back_to_resumes_list_keyboard()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if resume.file_id:
            try:
                if resume.file_path and resume.file_path.lower().endswith(('.jpg', '.jpeg', '.png')):
                    await bot.send_photo(
                        chat_id=callback.message.chat.id,
                        photo=resume.file_id,
                        caption=f"–§–∞–π–ª —Ä–µ–∑—é–º–µ: {resume.title}"
                    )
                else:
                    await bot.send_document(
                        chat_id=callback.message.chat.id,
                        document=resume.file_id,
                        caption=f"–§–∞–π–ª —Ä–µ–∑—é–º–µ: {resume.title}"
                    )
            except Exception as e:
                print(f"Error sending file: {e}")
                await callback.message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."
                )

    await callback.answer()

@router.callback_query(F.data == "back_to_resumes_list")
async def back_to_resumes_list(callback: CallbackQuery):
    async for session in get_session():
        result = await session.execute(
            select(Resume).where(Resume.user_id == callback.from_user.id)
        )
        resumes = result.scalars().all()
        
        if not resumes:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ.",
                reply_markup=get_job_seeker_menu()
            )
            return
            
        await callback.message.edit_text(
            "–í–∞—à–∏ —Ä–µ–∑—é–º–µ:",
            reply_markup=get_resumes_list_keyboard(resumes)
        )
    await callback.answer()

@router.callback_query(F.data == "delete_resume")
async def delete_resume(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–∑—é–º–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        # –ò—â–µ–º ID –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        text_lines = callback.message.text.split('\n')
        for line in text_lines:
            if line.startswith('ID:'):
                resume_id = int(line.split('ID:')[1].strip())
                break
        else:
            raise ValueError("ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            
    except (IndexError, ValueError) as e:
        print(f"Error parsing resume ID: {e}")
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∑—é–º–µ",
            reply_markup=get_job_seeker_menu()
        )
        return
    
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ä–µ–∑—é–º–µ?",
        reply_markup=get_confirm_delete_resume_keyboard(resume_id)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_resume_"))
async def confirm_delete_resume(callback: CallbackQuery):
    try:
        resume_id = int(callback.data.split("_")[-1])
    except (IndexError, ValueError):
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Ä–µ–∑—é–º–µ",
            reply_markup=get_job_seeker_menu()
        )
        return
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—é–º–µ
        result = await session.execute(
            select(Resume).where(
                and_(
                    Resume.id == resume_id,
                    Resume.user_id == callback.from_user.id
                )
            )
        )
        resume = result.scalar_one_or_none()

        if not resume:
            await callback.message.edit_text(
                "–û—à–∏–±–∫–∞: —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ",
                reply_markup=get_job_seeker_menu()
            )
            return

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if resume.file_path and os.path.exists(resume.file_path):
            try:
                os.remove(resume.file_path)
            except Exception as e:
                print(f"Error deleting file: {e}")

        # –£–¥–∞–ª—è–µ–º —Ä–µ–∑—é–º–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await session.delete(resume)
        await session.commit()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ
        result = await session.execute(
            select(Resume).where(Resume.user_id == callback.from_user.id)
        )
        resumes = result.scalars().all()
        
        if not resumes:
            await callback.message.edit_text(
                "‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!\n–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —Ä–µ–∑—é–º–µ.",
                reply_markup=get_job_seeker_menu()
            )
        else:
            await callback.message.edit_text(
                "‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!\n–í–∞—à–∏ —Ä–µ–∑—é–º–µ:",
                reply_markup=get_resumes_list_keyboard(resumes)
            )

    await callback.answer()

@router.callback_query(F.data == "search_vacancies")
async def search_vacancies(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    )
    await state.set_state(SearchVacancy.waiting_for_position)

@router.message(SearchVacancy.waiting_for_position)
async def process_vacancy_search(message: Message, state: FSMContext):
    search_title = message.text.strip()
    
    async for session in get_session():
        # –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        result = await session.execute(
            select(Vacancy).where(
                Vacancy.title.ilike(f"%{search_title}%")
            )
        )
        vacancies = result.scalars().all()
        
        if not vacancies:
            await message.answer(
                "–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
                reply_markup=get_job_seeker_menu()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        vacancy_ids = [v.id for v in vacancies]
        await state.update_data(found_vacancies=vacancy_ids)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
        vacancy = vacancies[0]
        await message.answer(
            f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {vacancy.title}\n"
            f"–ö–æ–º–ø–∞–Ω–∏—è: {vacancy.company}\n"
            f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy.salary}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {vacancy.description}\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {vacancy.created_at.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=get_vacancy_navigation_keyboard(vacancy.id, len(vacancies), 0)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if vacancy.file_id:
            try:
                if vacancy.file_path and vacancy.file_path.lower().endswith(('.jpg', '.jpeg', '.png')):
                    await message.answer_photo(
                        photo=vacancy.file_id,
                        caption=f"–§–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy.title}"
                    )
                else:
                    await message.answer_document(
                        document=vacancy.file_id,
                        caption=f"–§–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy.title}"
                    )
            except Exception as e:
                print(f"Error sending file: {e}")
                await message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."
                )

@router.callback_query(F.data.startswith(("prev_vacancy_", "next_vacancy_")))
async def navigate_vacancies(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    action = parts[1]
    current_index = int(parts[2])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    vacancy_ids = data.get("found_vacancies", [])
    
    if not vacancy_ids:
        await callback.message.delete()
        await callback.message.answer(
            "–í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_job_seeker_menu()
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
    new_index = current_index - 1 if action == "prev" else current_index + 1
    
    if 0 <= new_index < len(vacancy_ids):
        async for session in get_session():
            result = await session.execute(
                select(Vacancy).where(Vacancy.id == vacancy_ids[new_index])
            )
            vacancy = result.scalar_one_or_none()
            
            if vacancy:
                await callback.message.delete()
                await callback.message.answer(
                    f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {vacancy.title}\n"
                    f"–ö–æ–º–ø–∞–Ω–∏—è: {vacancy.company}\n"
                    f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy.salary}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {vacancy.description}\n"
                    f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {vacancy.created_at.strftime('%d.%m.%Y %H:%M')}",
                    reply_markup=get_vacancy_navigation_keyboard(vacancy.id, len(vacancy_ids), new_index)
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if vacancy.file_id:
                    try:
                        if vacancy.file_path and vacancy.file_path.lower().endswith(('.jpg', '.jpeg', '.png')):
                            await callback.bot.send_photo(
                                chat_id=callback.message.chat.id,
                                photo=vacancy.file_id,
                                caption=f"–§–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy.title}"
                            )
                        else:
                            await callback.bot.send_document(
                                chat_id=callback.message.chat.id,
                                document=vacancy.file_id,
                                caption=f"–§–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy.title}"
                            )
                    except Exception as e:
                        print(f"Error sending file: {e}")
                        await callback.message.answer(
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."
                        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("apply_vacancy_"))
async def show_resume_selection(callback: CallbackQuery, state: FSMContext):
    vacancy_id = int(callback.data.split("_")[-1])
    print(f"Applying for vacancy: {vacancy_id}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(Resume).where(Resume.user_id == callback.from_user.id)
        )
        resumes = result.scalars().all()
        
        print(f"Found {len(resumes)} resumes for user {callback.from_user.id}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        
        if not resumes:
            await callback.message.edit_text(
                "–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∑—é–º–µ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞. –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑—é–º–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_job_seeker_menu()
            )
            return
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞:",
            reply_markup=get_resume_selection_keyboard(resumes, vacancy_id)
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("select_resume_"))
async def submit_application(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    resume_id = int(parts[2])
    vacancy_id = int(parts[3])
    
    print(f"Submitting application: resume {resume_id} for vacancy {vacancy_id}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –∏ —Ä–µ–∑—é–º–µ
        result = await session.execute(
            select(Vacancy).where(Vacancy.id == vacancy_id)
        )
        vacancy = result.scalar_one_or_none()
        
        result = await session.execute(
            select(Resume).where(Resume.id == resume_id)
        )
        resume = result.scalar_one_or_none()
        
        if not vacancy or not resume:
            await callback.message.edit_text(
                "–í–∞–∫–∞–Ω—Å–∏—è –∏–ª–∏ —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_job_seeker_menu()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª–∏–∫
        application = Application(
            user_id=callback.from_user.id,
            vacancy_id=vacancy_id,
            resume_id=resume_id,
            status="new"
        )
        session.add(application)
        await session.commit()
        
        print(f"Created application: {application.id}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
        await callback.bot.send_message(
            chat_id=vacancy.user_id,
            text=f"–ù–∞ –≤–∞—à—É –≤–∞–∫–∞–Ω—Å–∏—é '{vacancy.title}' –ø—Ä–∏—à–µ–ª –æ—Ç–∫–ª–∏–∫!"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—é–º–µ
        resume_text = (
            f"–†–µ–∑—é–º–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {resume.title}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {resume.description}\n"
            f"–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {resume.experience}\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {resume.created_at.strftime('%d.%m.%Y %H:%M')}"
        )
        await callback.bot.send_message(
            chat_id=vacancy.user_id,
            text=resume_text,
            reply_markup=get_application_response_keyboard(application.id)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if resume.file_id:
            try:
                if resume.file_path and resume.file_path.lower().endswith(('.jpg', '.jpeg', '.png')):
                    await callback.bot.send_photo(
                        chat_id=vacancy.user_id,
                        photo=resume.file_id,
                        caption=f"–§–∞–π–ª —Ä–µ–∑—é–º–µ: {resume.title}"
                    )
                else:
                    await callback.bot.send_document(
                        chat_id=vacancy.user_id,
                        document=resume.file_id,
                        caption=f"–§–∞–π–ª —Ä–µ–∑—é–º–µ: {resume.title}"
                    )
            except Exception as e:
                print(f"Error sending resume file: {e}")
                await callback.bot.send_message(
                    chat_id=vacancy.user_id,
                    text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ."
                )
        
        await callback.message.edit_text(
            "‚úÖ –û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!",
            reply_markup=get_job_seeker_menu()
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("reject_"))
async def reject_application(callback: CallbackQuery, state: FSMContext):
    application_id = int(callback.data.split("_")[1])
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∫–ª–∏–∫–µ
        result = await session.execute(
            select(Application, Vacancy)
            .join(Vacancy)
            .where(Application.id == application_id)
        )
        application_data = result.first()
        
        if not application_data:
            await callback.message.edit_text(
                "–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_employer_menu()
            )
            return
        
        application, vacancy = application_data
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞
        application.status = "rejected"
        await session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
        await callback.bot.send_message(
            chat_id=application.user_id,
            text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –≤–∞–∫–∞–Ω—Å–∏–∏ '{vacancy.title}'."
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
        await callback.message.edit_text(
            f"–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—é –≤ –≤–∞–∫–∞–Ω—Å–∏–∏ '{vacancy.title}'."
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("invite_"))
async def invite_application(callback: CallbackQuery, state: FSMContext):
    application_id = int(callback.data.split("_")[1])
    
    async for session in get_session():
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∫–ª–∏–∫–µ
        result = await session.execute(
            select(Application, Vacancy)
            .join(Vacancy)
            .where(Application.id == application_id)
        )
        application_data = result.first()
        
        if not application_data:
            await callback.message.edit_text(
                "–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_employer_menu()
            )
            return
        
        application, vacancy = application_data
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞
        application.status = "invited"
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ
        employer = await callback.bot.get_chat(vacancy.user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è
        await callback.bot.send_message(
            chat_id=application.user_id,
            text=(
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é '{vacancy.title}'.\n"
                f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º: @{employer.username}"
            )
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
        applicant = await callback.bot.get_chat(application.user_id)
        await callback.message.edit_text(
            f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é '{vacancy.title}'.\n"
            f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–º: @{applicant.username}"
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("back_to_vacancy_"))
async def back_to_vacancy(callback: CallbackQuery, state: FSMContext):
    vacancy_id = int(callback.data.split("_")[-1])
    
    async for session in get_session():
        result = await session.execute(
            select(Vacancy).where(Vacancy.id == vacancy_id)
        )
        vacancy = result.scalar_one_or_none()
        
        if vacancy:
            await callback.message.edit_text(
                f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {vacancy.title}\n"
                f"–ö–æ–º–ø–∞–Ω–∏—è: {vacancy.company}\n"
                f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy.salary}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {vacancy.description}\n"
                f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {vacancy.created_at.strftime('%d.%m.%Y %H:%M')}",
                reply_markup=get_vacancy_navigation_keyboard(vacancy.id, 1, 0)
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if vacancy.file_id:
                try:
                    if vacancy.file_path and vacancy.file_path.lower().endswith(('.jpg', '.jpeg', '.png')):
                        await callback.bot.send_photo(
                            chat_id=callback.message.chat.id,
                            photo=vacancy.file_id,
                            caption=f"–§–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy.title}"
                        )
                    else:
                        await callback.bot.send_document(
                            chat_id=callback.message.chat.id,
                            document=vacancy.file_id,
                            caption=f"–§–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy.title}"
                        )
                except Exception as e:
                    print(f"Error sending file: {e}")
                    await callback.message.answer(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."
                    )
    
    await callback.answer()

@router.callback_query(F.data == "return_to_main_menu")
async def return_to_main_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_job_seeker_menu()
    )
    await callback.answer() 